<?php

namespace App\Tests\Func;

use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;

class UserTest extends AbstractEndPoint
{
    private string $hardUserPayload = '{"username": "hardUsername", "email": "hard@gmail.com", "password": "password"}';
    private string $putUserPayload = '{"username": "putUser", "email": "put@gmail.com", "password": "password"}';

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
    }

    public function testPostUsers() : void
    {
        $response = $this->getResponseFromRequest(
            Request::METHOD_POST,
            "/users",
            $this->hardUserPayload,
        );

        $responseContent = $response->getContent();
        $responseDecoded = json_decode($responseContent);

        self::assertEquals(Response::HTTP_CREATED, $response->getStatusCode());
        // Verify if json content is json type
        self::assertJson($responseContent);
        self::assertNotEmpty($responseDecoded);
    }

    public function testDuplicateUser() : void
    {
        // create a duplicate of the already created user
        $response = $this->getResponseFromRequest(
            Request::METHOD_POST,
            "/users",
            $this->hardUserPayload,
        );

        // this operation should cause an error on the server
        self::assertEquals(Response::HTTP_INTERNAL_SERVER_ERROR, $response->getStatusCode());
    }

    public function testGetUsers() : void
    {
        $response = $this->getResponseFromRequest(Request::METHOD_GET, "/users");

        $responseContent = $response->getContent();
        $responseDecoded = json_decode($responseContent);

        self::assertEquals(Response::HTTP_OK, $response->getStatusCode());
        // Verify if json content is json type
        self::assertJson($responseContent);
        self::assertNotEmpty($responseDecoded);
    }

    public function testPutUsers() : void
    {
        // Get the previously created user
        $response = $this->getResponseFromRequest(Request::METHOD_GET, "/users");
        $responseContent = $response->getContent();
        $responseDecoded = json_decode($responseContent);

        $createdTestUserId = $responseDecoded[0]->id;

        $response = $this->getResponseFromRequest(
            Request::METHOD_PUT,
            "/users/".$createdTestUserId,
            $this->putUserPayload
        );

        $responseContent = $response->getContent();
        $responseDecoded = json_decode($responseContent);

        self::assertEquals(Response::HTTP_OK, $response->getStatusCode());
        // Verify if json content is json type
        self::assertJson($responseContent);
        self::assertNotEmpty($responseDecoded);
    }

    public function testDeleteUsers() : void
    {
        // recover created user id
        $response = $this->getResponseFromRequest(Request::METHOD_GET, "/users");
        $responseContent = $response->getContent();
        $responseDecoded = json_decode($responseContent);

        $createdTestUserId = $responseDecoded[0]->id;

        $response = $this->getResponseFromRequest(
            Request::METHOD_DELETE,
            "/users/".$createdTestUserId
        );

        $responseContent = $response->getContent();

        self::assertEquals(Response::HTTP_NO_CONTENT, $response->getStatusCode());
    }
}